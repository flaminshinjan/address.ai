version: '3.8'

services:
  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user/Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    environment:
      - DATABASE_URL=postgres://${USER_DB_USER}:${USER_DB_PASSWORD}@${USER_DB_HOST}:${USER_DB_PORT}/${USER_DB_NAME}?sslmode=disable
      - JWT_SECRET=${USER_JWT_SECRET}
      - SERVICE_PORT=${USER_SERVICE_PORT}
    depends_on:
      - user-db
    networks:
      - hotel-network

  user-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - POSTGRES_DB=${USER_DB_NAME}
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - hotel-network

  # Room Management Service
  room-service:
    build:
      context: .
      dockerfile: services/room/Dockerfile
    ports:
      - "${ROOM_SERVICE_PORT}:${ROOM_SERVICE_PORT}"
    environment:
      - DATABASE_URL=postgres://${ROOM_DB_USER}:${ROOM_DB_PASSWORD}@${ROOM_DB_HOST}:${ROOM_DB_PORT}/${ROOM_DB_NAME}?sslmode=disable
      - JWT_SECRET=${ROOM_JWT_SECRET}
      - SERVICE_PORT=${ROOM_SERVICE_PORT}
      - USER_SERVICE_URL=${ROOM_USER_SERVICE_URL}
    depends_on:
      - room-db
      - user-service
    networks:
      - hotel-network

  room-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${ROOM_DB_USER}
      - POSTGRES_PASSWORD=${ROOM_DB_PASSWORD}
      - POSTGRES_DB=${ROOM_DB_NAME}
    volumes:
      - room-db-data:/var/lib/postgresql/data
    networks:
      - hotel-network

  # Food Management Service
  food-service:
    build:
      context: .
      dockerfile: services/food/Dockerfile
    ports:
      - "${FOOD_SERVICE_PORT}:${FOOD_SERVICE_PORT}"
    environment:
      - DATABASE_URL=postgres://${FOOD_DB_USER}:${FOOD_DB_PASSWORD}@${FOOD_DB_HOST}:${FOOD_DB_PORT}/${FOOD_DB_NAME}?sslmode=disable
      - JWT_SECRET=${FOOD_JWT_SECRET}
      - SERVICE_PORT=${FOOD_SERVICE_PORT}
      - USER_SERVICE_URL=${FOOD_USER_SERVICE_URL}
    depends_on:
      - food-db
      - user-service
    networks:
      - hotel-network

  food-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${FOOD_DB_USER}
      - POSTGRES_PASSWORD=${FOOD_DB_PASSWORD}
      - POSTGRES_DB=${FOOD_DB_NAME}
    volumes:
      - food-db-data:/var/lib/postgresql/data
    networks:
      - hotel-network

  # Supply Chain Service
  supply-service:
    build:
      context: .
      dockerfile: services/supply/Dockerfile
    ports:
      - "${SUPPLY_SERVICE_PORT}:${SUPPLY_SERVICE_PORT}"
    environment:
      - DATABASE_URL=postgres://${SUPPLY_DB_USER}:${SUPPLY_DB_PASSWORD}@${SUPPLY_DB_HOST}:${SUPPLY_DB_PORT}/${SUPPLY_DB_NAME}?sslmode=disable
      - JWT_SECRET=${SUPPLY_JWT_SECRET}
      - SERVICE_PORT=${SUPPLY_SERVICE_PORT}
      - USER_SERVICE_URL=${SUPPLY_USER_SERVICE_URL}
    depends_on:
      - supply-db
      - user-service
    networks:
      - hotel-network

  supply-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${SUPPLY_DB_USER}
      - POSTGRES_PASSWORD=${SUPPLY_DB_PASSWORD}
      - POSTGRES_DB=${SUPPLY_DB_NAME}
    volumes:
      - supply-db-data:/var/lib/postgresql/data
    networks:
      - hotel-network

networks:
  hotel-network:
    driver: bridge

volumes:
  user-db-data:
  room-db-data:
  food-db-data:
  supply-db-data: 